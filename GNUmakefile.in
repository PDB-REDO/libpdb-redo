# SPDX-License-Identifier: BSD-2-Clause
# 
# Copyright (c) 2020 NKI/AVL, Netherlands Cancer Institute
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# makefile for libpdb-redo

.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @BOOST_CPPFLAGS@ @CPPFLAGS@ @PTHREAD_CFLAGS@ @CIFPP_CFLAGS@ @GSL_CFLAGS@ @DLIB_CFLAGS@ @NEWUOA_CFLAGS@
LDFLAGS				= @LDFLAGS@ @PTHREAD_CFLAGS@ @BOOST_LDFLAGS@
LIBS				= @CIFPP_LIBS@ \
					  @ZEEP_LIBS@ \
					  @GSL_LIBS@ \
					  @DLIB_LIBS@ \
					  @NEWUOA_LIBS@ \
					  @CLIPPER_LIBS@ \
					  @BOOST_IOSTREAMS_LIB@ \
					  @BOOST_DATE_TIME_LIB@ \
					  @BOOST_REGEX_LIB@ \
					  @LIBS@

prefix				= $(DESTDIR)@prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
includedir			= @includedir@
datarootdir			= @datarootdir@
datadir				= @datadir@
pkgconfigdir		= $(libdir)/pkgconfig

CCP4DIR				= @CCP4@
CLIBD				= $(CCP4DIR:%=%/lib/data)

# place to store our static data:
DATA_DIR			= @DATA_LIB_DIR@
DEFINES				+= DATADIR='"$(DATA_DIR)"'

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

ifeq "$(CHECK_CONFIG)" "1"

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

LIB_NAME			= @PACKAGE_NAME@
LIB_VERSION			= @LIBPDB_REDO_LT_VERSION@
LIB_CURRENT			= @LIBPDB_REDO_LT_CURRENT@
LIB_TARGET			= $(LIB_NAME).la
VERSION             = @LIBPDB_REDO_SEMANTIC_VERSION@
DIST_NAME           = @PACKAGE_NAME@-$(subst :,.,$(VERSION))

# libtool stuff

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status libtool

LIBTOOL = $(SHELL) @abs_top_builddir@/libtool
CXXCOMPILE = $(LIBTOOL) --silent --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -version-info $(LIB_VERSION) -o $@

# main build variables
CXXFLAGS            += -Wall -Wno-multichar -I include

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

# targets

VPATH += src:test:tools

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR) data:
	mkdir -p $@

OBJECTS		= $(OBJDIR)/AtomShape.lo \
			  $(OBJDIR)/BondMap.lo \
			  $(OBJDIR)/ClipperWrapper.lo \
			  $(OBJDIR)/DistanceMap.lo \
			  $(OBJDIR)/MapMaker.lo \
			  $(OBJDIR)/Minimizer.lo \
			  $(OBJDIR)/Ramachandran.lo \
			  $(OBJDIR)/ResolutionCalculator.lo \
			  $(OBJDIR)/Restraints.lo \
			  $(OBJDIR)/SkipList.lo \
			  $(OBJDIR)/Statistics.lo \
			  $(OBJDIR)/Symmetry-2.lo

# We have development releases and official releases, for each we
# maintain different versioning schemes.

ifeq "x@UPDATE_REVISION@" "x"

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE):
	rm -f version-info-*.txt
	@ echo libcifpp-version: $(VERSION) > $@
	@ git describe --match=build --dirty >> $@
	@ git log --pretty=medium --date=iso8601 -1 >> $@

src/revision.hpp: $(REVISION_FILE)
	@ echo 'const char kRevision[] = R"(' > $@
	@ cat $? >> $@
	@ echo ')";' >> $@

else

src/revision.hpp:
	@ echo 'const char kRevision[] = R"(' > $@
	@ echo libcifpp-version: $(VERSION) >> $@
	@ echo Date:   $$(date --iso-8601) >> $@
	@ echo ')";' >> $@

endif

$(OBJDIR)/CifUtils.o $(OBJDIR)/CifUtils.lo: src/revision.hpp

$(LIB_TARGET): $(OBJECTS)
	$(CXXLINK) -rpath $(libdir) $(OBJECTS) $(LIBS)

.PHONY: lib
lib: $(LIB_TARGET)

.PHONY: all
all: lib rsrc/bond-info.bin

-include $(OBJECTS:%.lo=%.d)

$(OBJECTS:.lo=.d):

$(OBJDIR)/%.lo: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXXCOMPILE) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

$(OBJDIR)/%.o: %.cpp | $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) $(CXXFLAGS) -MT $@ -MD -MP -MF $(OBJDIR)/$*.d -c -o $@ $<

.PHONY: clean
clean:
	rm -rf .libs $(OBJDIR)/* $(LIB_TARGET)
	rm -f $(TESTS:%=test/%-test)

.PHONY: distclean
distclean: clean
	rm -f libtool config.lt
	rm -f config.status config.cache config.log configure.lineno config.status.lineno
	rm -f GNUmakefile

# Test rules

unit-test_ENV = BOND_INFO_FILE=${CURDIR}/rsrc/bond-info.bin

define TEST_template =

-include $$(OBJDIR)/$(1)-test.d

$(1)_OBJECTS = $$(OBJDIR)/$(1)-test.o

test/$(1)-test: $(LIB_TARGET) $$($(1)_OBJECTS)
	@ echo ">>> building $(1)-test"
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $$@ $$($(1)_OBJECTS) -L.libs -lpdb-redo $(LIBS)

.PHONY: $(1)-test
$(1)-test: test/$(1)-test
	cd test; $$($(1)-test_ENV) LD_LIBRARY_PATH=../.libs ./$(1)-test

endef

TESTS = unit

$(foreach part,$(TESTS),$(eval $(call TEST_template,$(part))))

.PHONY: test
test: $(TESTS:%=%-test)

data/components.cif.gz:
	mkdir -p data
	wget -O $@ ftp://ftp.wwpdb.org/pub/pdb/data/monomers/components.cif.gz

rsrc/bond-info.bin: tools/make-bond-info data/components.cif.gz
	LD_LIBRARY_PATH=.libs tools/make-bond-info data/components.cif.gz rsrc/bond-info.bin

tools/make-bond-info: $(OBJDIR)/make-bond-info.o $(OBJECTS) | lib
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $(OBJDIR)/make-bond-info.o -L.libs -lpdb-redo $(LIBS)

HEADERS = \
	AtomShape.hpp \
	BondMap.hpp \
	ClipperWrapper.hpp \
	DistanceMap.hpp \
	MapMaker.hpp \
	Minimizer.hpp \
	Ramachandran.hpp \
	ResolutionCalculator.hpp \
	Restraints.hpp \
	SkipList.hpp \
	Statistics.hpp \
	Symmetry-2.hpp

.PHONY: install
install: all
	install -d $(libdir)
	$(LIBTOOL) --mode=install install $(LIB_TARGET) $(libdir)
	install -d $(includedir)/pdb-redo
	for f in $(HEADERS); do install include/pdb-redo/$$f $(includedir)/pdb-redo/$$f; done
	install -d $(pkgconfigdir)
	install -m 644 $(LIB_NAME).pc $(pkgconfigdir)/$(LIB_NAME).pc
	install -d $(DATA_DIR)
	install -m 644 rsrc/bond-info.bin $(DATA_DIR)/bond-info.bin

dist-clean: clean

.PHONY: dist
dist:
	rm -rf $(DIST_NAME)
	mkdir $(DIST_NAME)
	git archive trunk | tar -x -C $(DIST_NAME)
	tar czf $(DIST_NAME).tgz $(DIST_NAME)
	rm -rf $(DIST_NAME)

FORCE:
